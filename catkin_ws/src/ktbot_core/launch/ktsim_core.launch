<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find ktbot_description)/world/ktbot_gazebo.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Push into a namspace so mqtt is still valid even if brain and core are both run on the same host. -->
  <group ns="ktbot">

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description"
      command="$(find xacro)/xacro --inorder '$(find ktbot_description)/urdf/ktbot.xacro'" />

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
      args="-urdf -model ktbot -param robot_description"/>

    <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher">
      <param name="publish_frequency" type="double" value="30.0" />
    </node>

    <rosparam command="load" file="$(find ktbot_description)/config/joints.yaml"/>

    <node name="ktbot_controller_spawner" pkg="controller_manager" type="spawner" args="joint_state_controller wheel_diff_drive_controller"/>

  </group>

</launch>