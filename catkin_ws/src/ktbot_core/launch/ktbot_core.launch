<launch>
  <arg name="sim" default="false"/> 

  <!-- Push into a namspace so mqtt is still valid even if brain and core are both run on the same host. -->
  <group ns="ktbot">
    <node name="mqtt_bridge" pkg="mqtt_bridge" type="mqtt_bridge_node.py" output="screen">
      <rosparam command="load" file="$(find ktbot_core)/config/ktbot_bridge_params.yaml" />
    </node>
    
    <!-- Load example URDF -->
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find ktbot_description)/urdf/ktbot.xacro'" />

    <!-- Load hardware interface -->
    <node name="ktbot_hardware_interface" pkg="ktbot_control" type="ktbot_hw_main"
          output="screen" launch-prefix="$(arg launch_prefix)"/>

    <!-- Load controller settings -->
    <rosparam file="$(find ktbot_control)/config/ktbot_controllers.yaml" command="load"/>

    <!-- Load controller manager -->
    <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false"
    output="screen" args="spawn joint_state_controller wheel_diff_drive_controller" />

    <!-- Convert joint states to /tf tranforms -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <node name="lidar" pkg="kt_lidar" type="node.py" output="screen">
      <rosparam command="load" file="$(find ktbot_core)/config/ktbot_bridge_params.yaml" />
    </node>
  </group>

  <include file="$(find kt_gazebo)/launch/kt_gazebo.launch" if="$(arg sim)"/>
</launch>
